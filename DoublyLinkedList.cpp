#include <iostream>#include<fstream>using namespace std;class Node{  private:	float data;	Node *next;	Node *prev;  public:	Node(float n)	{		data = n;		next = NULL;		prev = NULL;	}	void setData(float n)	{		data = n;	}	float getData()	{		return data;	}	void setNext(Node *n)	{		next = n;	}	Node *getNext()	{		return next;	}	void setPrev(Node *n)	{		prev = n;	}	Node *getPrev()	{		return prev;	}	void display()	{		cout << "\n The DATA IS ::  " << data;	}};class DoublyLinkedList{  private:	Node *head;	Node *last;  public:	DoublyLinkedList()	{		head = NULL;		last=NULL;	}	void addAtStart(float n)	{		Node *temp = new Node(n);		if (head != NULL)		{			head->setPrev(temp);			temp->setNext(head);			head = temp;		}		else {			head = temp;			last = temp;		}	}	void display()	{		Node *temp = head;		if(temp==NULL){cout<<"\n list is empty";}		while (temp != NULL)		{			temp->display();			temp = temp->getNext();		}	}	int Size()	{		Node *temp = head;		int no_of_nodes = 0;		while (temp != NULL)		{			no_of_nodes = no_of_nodes + 1;			temp = temp->getNext();		}		return no_of_nodes;	}	int Search(float n)	{		Node *temp = head;		int index = 0;		while (temp != NULL)		{			index = index + 1;			if (temp->getData() == n)			{				return index;			}			else {				temp = temp->getNext();			}		}		return -1;	}	void addAtend(float n)	{		Node *temp = head;		Node *temp2 = new Node(n);		if (temp == NULL)		{			head = temp2;			last = temp2;		}		else {			while (temp->getNext() != NULL)			{				temp = temp->getNext();			}			if (temp->getNext() == NULL)			{				temp->setNext(temp2);				temp2->setPrev(temp);				last = temp2;			}		}	}	void add(float n, int i)	{		Node *temp = head;		int index = 1;		Node *t = new Node(n);		if (i <= 1)		{			addAtStart(n);		}		else if (i >= Size())		{			addAtend(n);		}		else {			while (index != i)			{				index++;				temp = temp->getNext();			}			t->setPrev(temp);			t->setNext(temp->getNext());			temp->getNext()->setPrev(t);			temp->setNext(t);		}	}	void removeStart()	{		if (head == NULL || head == last)		{			head = NULL;			last = NULL;		}		else {			head = head->getNext();		}	}	void removeEnd()	{		if (last == NULL || last == head)		{			head = NULL;			last = NULL;		}		else {			last->getPrev()->setNext(NULL);			last = last->getPrev();		}	}	void remove(float n)	{		Node* temp=head;		while(temp->getNext()!=NULL && temp->getData()!=n)		{			temp=temp->getNext();		}		if(temp==last && temp->getData()==n)		{			removeEnd();		}	else if(temp==head && temp->getData()==n)	{		removeStart();	}	else if(temp->getData()==n) {		temp->getNext()->setPrev(temp->getPrev());		temp->getPrev()->setNext(temp->getNext());	}	else{return;}		}		void removeAt(int n)	{		Node* temp=head;		if(n>Size()){ cout<<"\n you entered larger than size number  the size is "<<Size();return; }		if(n==1 || n<1)		{			removeStart();		}		else if(n==Size())		{			removeEnd();		}		else {			int index=1;			while(index!=n)			{				index++;				temp=temp->getNext();			}			Node* back=temp->getPrev();			Node* front=temp->getNext();			back->setNext(front);			front->setPrev(back);		}	}	void displayReverse()	{		Node* temp=last;		if(temp==NULL){return;}		while(temp!=head)		{			temp->display();			temp=temp->getPrev();		}		temp->display();	}	void reverse()	{		Node* temp=head;		Node*  front;		Node* back;		while(temp!=NULL)		{			back=temp->getPrev();			front=temp->getNext();			temp->setNext(back);			temp->setPrev(front);			temp=front;		}		Node* temp1=head;		head=last;		last=temp1;	}	void automator(string a)	{		fstream file;		file.open(a);		while(!file.eof())		{			string t;			file>>t;			if(t=="endl"){cout<<endl<<endl;}			if(t=="AAS"){				float x;				file>>x;				addAtStart(x);				  }			if(t=="AAE")			{				float x;				file>>x;				addAtend(x);			}			if(t=="ADD")			{				float x;				float y;				file>>x>>y;				add(x,y);			}			if(t=="REM")			{				float x;				file>>x;				remove(x);			}			if(t=="RAT")			{				int x;				file>>x;				removeAt(x);			}			if(t=="RAS")			{				removeStart();			}			if(t=="RAE")			{				removeEnd();			}			if(t=="DIS")			{				display();			}			if(t=="DIR")			{				displayReverse();			}			if(t=="REV")			{				reverse();			}		}		} 	};	int main()	{		DoublyLinkedList b;		b.addAtStart(566);		b.automator("input.txt");					}